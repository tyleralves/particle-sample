/* Mix-ins */
// Remove last element gutter
@mixin omega($query: block, $direction: default) {
  $table: if(belongs-to(table, $query), true, false);
  $auto: if(belongs-to(auto, $query), true, false);

  @if $direction != default {
    @warn "The omega mixin will no longer take a $direction argument. To change the layout direction, use row($direction) or set $default-layout-direction instead."
  } @else {
    $direction: get-direction($layout-direction, $default-layout-direction);
  }

  @if $table {
    @warn "The omega mixin no longer removes padding in table layouts."
  }

  @if length($query) == 1 {
    @if $auto {
      &:last-child {
        margin-#{$direction}: 0;
      }
    }

    @else if contains-display-value($query) and $table == false {
      margin-#{$direction}: 0;
    }

    @else {
      @include nth-of-type($query, $direction);
    }
  }

  @else if length($query) == 2 {
    @if $auto {
      &:last-child {
        margin-#{$direction}: 0;
      }
    }

    @else {
      @include nth-of-type(nth($query, 1), $direction);
    }
  }

  @else {
    @warn "Too many arguments passed to the omega() mixin."
  }
}

@mixin nth-of-type($query, $direction) {
  $opposite-direction: get-opposite-direction($direction);

  &:nth-of-type(#{$query}) {
    margin-#{$direction}: 0;
  }

  @if type-of($query) == number {
    &:nth-of-type(#{$query}+1) {
      clear: $opposite-direction;
    }
  }
}


@mixin omega-reset($nth) {
  &:nth-of-type(#{$nth}) { margin-right: flex-gutter(); }
  &:nth-of-type(#{$nth}+1) { clear: none }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius;
}

@mixin transition($args...) {
  -webkit-transition: $args;
     -moz-transition: $args;
       -o-transition: $args;
          transition: $args;
}

@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin button($color) {
  border: 2px solid $color;
  border-radius: 4px;
  display: inline-block;
  color: $color;
  text-transform: uppercase;
  font-weight: 700;
  padding: 14px 18px;
  text-decoration: none;
  cursor: pointer;
  @include transition(background 0.2s linear);
  font-size: 12px;
  letter-spacing: .7px;
}

@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}

@mixin nav-button($color) {
  border: 2px solid $color;
  border-radius: 4px;
  display: inline-block;
  color: $color;
  text-transform: uppercase;
  font-weight: 700;
  padding: 8px 12px 8px;
  text-decoration: none;
  font-size: 12px;
  cursor: pointer;
}

@mixin secondary-button($color) {
  border: 2px solid $color;
  background: 0;
  border-radius: 4px;
  display: inline-block;
  color: $color;
  text-transform: uppercase;
  font-weight: 700;
  padding: 14px 18px;
  text-decoration: none;
  cursor: pointer;
  font-size: 12px;
  letter-spacing: .7px;
  @include transition(background 0.2s linear, color 0.2s linear);
  &:hover {
    background: $color;
    color: $white;
  }
}

@mixin solid-button($color) {
  border: 2px solid $color;
  border-radius: 4px;
  display: inline-block;
  background-color: $color;
  color: $white;
  text-transform: uppercase;
  font-weight: 700;
  padding: 14px 18px;
  text-decoration: none;
  @include transition(background 0.2s linear, border 0.2s linear);
  &:hover {
    border: 2px solid darken($color, 10%);
    background-color: darken($color, 10%);
  }
}

@mixin big-button {
  padding-left: 30px;
  padding-right: 30px;
}

@mixin float-left {
  float: left !important;
}

@mixin float-right {
  float: right !important;
}

@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;

    @if $direction == 'top' {
        border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
    }

    @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
      border-left: $size solid $color;
    }

    @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    }

    @else if $direction == 'left' {
        border-top: $size solid transparent;
      border-right: $size solid $color;
      border-bottom: $size solid transparent;
    }

    @else if $direction == 'top-left' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
    }

    @else if $direction == 'top-right' {
        border-top: $size solid $color;
        border-left: $size solid transparent;
    }

    @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color;
        border-right: $size solid transparent;
    }

    @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }

}
$prefixes: "-webkit-", "-moz-", "-ms-", "-o-", "";
@mixin box-shadow($shadow...) {
  @each $prefix in $prefixes {
    #{$prefix}box-shadow: $shadow;
  }
}
